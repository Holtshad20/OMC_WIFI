#include "OMC_WIFI_GlobalVariables.hpp"


//***************************************************************************************************************************************************************
//*************************************************    VARIABLES, CONSTANTES Y ARREGLOS PARA LECTURA ANALÓGICA     **********************************************
//***************************************************************************************************************************************************************

float rmsVolt = 0;      // Valor RMS Voltaje
float rmsCorr = 0;      // Valor RMS Corriente

//***************************************************************************************************************************************************************
//***************************************************************************************************************************************************************
//***************************************************************************************************************************************************************



//***************************************************************************************************************************************************************
//*************************************************    VARIABLES Y CONSTANTES PARA CONTROLAR EL RELAY     *******************************************************
//***************************************************************************************************************************************************************

uint8_t voltSup            = 135;     // Máximo voltaje permitido
uint8_t voltInf            = 100;     // Mínimo voltaje permitido
uint8_t corrSup            = 7;       // Máxima corriente permitida

uint8_t tiempoRecuperacion = 10;      // Tiempo requerido permitir paso de corriente luego de una falla o un reinicio (segundos)

boolean relay              = LOW;     // Estado del relay (software)
boolean controlGlobalRelay = true;    // Control Global del Relé
// Si controlGlobalRelay = 0 entonces estamos forzando a que se mantenga apagado sin importar el voltaje o la corriente.
// Si controlGlobalRelay = 1 entonces estamos trabajando de manera normal con los márgenes de voltaje y corriente normales.

//***************************************************************************************************************************************************************
//***************************************************************************************************************************************************************
//***************************************************************************************************************************************************************



//***************************************************************************************************************************************************************
//*******************************************************    CONSTANTES Y CONSTRUCTORES PARA AUTOCONNECT     ****************************************************
//***************************************************************************************************************************************************************

Preferences storage;                 // Espacio en memoria para guardar los datos necesarios

String      hostname;                // Variable donde se guardan los últimos 3 bytes de la dirección MAC (ESP.getEfuseMAC extrae los bytes deordenados)

boolean     connServer = false;      // Variable para indicar si el ESP32 está conectado al servidor

//***************************************************************************************************************************************************************
//***************************************************************************************************************************************************************
//***************************************************************************************************************************************************************


void credReset() {

  nvs_flash_deinit();     // Se desinicializa la partición NVS (necesario para poder borrarla)
  nvs_flash_erase();      // Se borra la partición NVS
  nvs_flash_init();       // Se inicializa la partición NVS

}
